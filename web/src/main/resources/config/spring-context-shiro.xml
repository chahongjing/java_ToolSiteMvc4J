<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <!--<bean id="myRealm" class="com.zjy.bll.common.ShiroRealmalm"/>-->

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="sessionManager" />
        <property name="realm" ref="shiroRealmBackAdmin"/>
        <!--<property name="authenticator" ref="defautModularRealm" />-->
        <!--<property name="authorizer" ref="defaultModularRealmAuthorizer"/>-->
    </bean>

    <bean id="shiroRealmBackAdmin" class="com.zjy.bll.common.shiro.ShiroRealmBackAdmin">
        <!-- 配置密码匹配器 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cacheManager" ref="memoryCacheManager"/>
        <property name="authenticationTokenClass" value="com.zjy.bll.common.shiro.ShiroTokenBackAdmin"/>
    </bean>

    <bean id="shiroRealmFrontAdmin" class="com.zjy.bll.common.shiro.ShiroRealmFrontAdmin">
        <!-- 配置密码匹配器 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cacheManager" ref="memoryCacheManager"/>
        <property name="authenticationTokenClass" value="com.zjy.bll.common.shiro.ShiroTokenFrontAdmin"/>
    </bean>

    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!-- 加密方式,MD5, SHA-1 -->
        <property name="hashAlgorithmName" value="MD5"></property>
        <property name="hashIterations" value="1024"></property>
    </bean>

    <!-- 多个shiroRealm验证支持 -->
    <bean id="defautModularRealm" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="shiroRealmBackAdmin" />
                <ref bean="shiroRealmFrontAdmin" />
            </list>
        </property>
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>

    <bean id="defaultModularRealmAuthorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="realms">
            <list>
                <ref bean="shiroRealmBackAdmin" />
                <ref bean="shiroRealmFrontAdmin" />
            </list>
        </property>
    </bean>

    <!-- 自定义会话管理配置 -->
    <bean id="sessionManager" class="com.zjy.bll.common.shiro.SessionManager">
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionDAO" ref="sessionDAO" />
    </bean>

    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="name" value="JSESSIONID" />
        <property name="path" value="/" />
    </bean>

    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="cacheManager" ref="memoryCacheManager"/>
    </bean>

    <bean id="memoryCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/index.html"/>
        <!--<property name="loginUrl" value="/user/loginpage"/>-->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <property name="unauthorizedUrl" value="/index.html"/>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filterChainDefinitions">
            <value>
                /favicon.ico=anon
                /user/login**=anon
                /user/logout**=anon
                /druid/**=anon
                /static/**=anon
                /comm/getEnums=anon
                /tool/getDriverUrlList=anon
                /tool/getTableInfo=anon
                /echarts/**=anon

                /user/loginpage=anon
                /learn/angulardemo=anon
                /learn/testangluar=anon
                /bootstrap/**=anon
                /js/**=anon
                /**=authc
            </value>
        </property>
    </bean>

    <bean id="formAuthenticationFilter" class="com.zjy.bll.common.shiro.CustomFormAuthenticationFilter"/>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
    <!-- 配置以下两个bean即可实现此功能 -->
    <!-- Enable Shiro Annotations for Spring-configured config. Only run after the lifecycleBeanProcessor has run -->
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
      <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
      </bean>
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>